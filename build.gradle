plugins {
	id "org.springframework.boot" version "${springBootVersion}"
	id "io.spring.dependency-management" version "${dependency}"
	id "org.sonarqube" version "${sonarqube}"
	id "java"
	id "jacoco"
}

group = "com.project"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "11"

configurations {
  all {
    exclude group: 'org.apache.logging.log4j'
  }
}

repositories {
	mavenCentral()
}

dependencies {
	implementation "org.springframework.boot:spring-boot-starter-web"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa"
	runtimeOnly "mysql:mysql-connector-java"
	implementation ("org.springdoc:springdoc-openapi-ui:${openApi}") {
		exclude group: "commons-io"
	}
	implementation "org.jsoup:jsoup:${jsoup}"
	implementation "commons-io:commons-io:${commonsio}"
	implementation "com.google.code.gson:gson:${gson}"
	compileOnly "org.projectlombok:lombok:${lombok}"
    annotationProcessor "org.projectlombok:lombok:${lombok}"

	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation "org.testng:testng:${testng}"

	developmentOnly "org.springframework.boot:spring-boot-devtools"
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

test {
	useTestNG() {
		useDefaultListeners = true
		suites "src/test/resources/integration-suite.xml"
		testLogging.showStandardStreams = true
	}
}

test.finalizedBy jacocoTestReport

sonarqube {
	properties {
		property "sonar.projectKey", "nirmal1064_SpringCricket"
		property "sonar.organization", "nirmal1064"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.core.codeCoveragePlugin", "jacoco"
		property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
  	}
}

tasks.named("sonarqube").configure {
    dependsOn test
}
